*******************************************************************************************
							Instructions of use of AES-GCM cohesion
							Author: Saad Bin Shams
							Latest Update Date/Time Stamp: 06/12/2018 01:57:11 AM  
*******************************************************************************************

	1. Be wary of printf() function:
		warning inducing printf() functions are huge cause of segmentation faults, therefore, while using the printf() function, remember to use them with caution and the warnings should be avoided. 
	
	2. Use unsigned char variable for key/plainText/tag/ciphertText:
		Pointer passing was being done between uint8_t and uchar. Uchar was undefined on my machine, but on contiki, uchar is defined as uint8_t. But the library is written with unsigned char in mind. Therefore, all the variables being passed should be of the appropriate type. 
		For ease, the function's API is being included and should be consulted while using the library: 
		
		unsigned char* aes_gcm_encrypt(unsigned char* output, const unsigned char* input, int input_length, const unsigned char* key, const size_t key_len, const unsigned char * iv, const size_t iv_len, const unsigned char *add_data, size_t add_len);
		
	3. Tag Calculated: 
		The tag calculated is of size 16 bytes. And you can use the tag according to your need. However, if the tag is being reduced in use then the constraints should be looked into properly. 
		
		
	4. Compiling Command: 
	- user$: gcc -Wall -g test_gcm.c aes-128.c aes-gcm.c gcm.c -o compiled_gcm
		
	Future changes: 
	1. Code Refactoring:
		The code is to be reduced in size to the amount we need so that space can be saved. 
		
	2. Support for tag in the API for the programming side to be added. Is completed. API with tag support is shown in point '2.' above. The tag pointer is returned in this function. 
	
	3. Support ADD_LEN and ADD_DATA to be added inside the API. Is completed. API with tag support is shown in point '2'. ADD_DATA and ADD_LEN are passsed as function arguments.   
	
	4. Security concern: The aes_128.c produces the static variable called "round_keys[11][AES_128_KEY_LENGTH]". This will remain in the memory throughout the lifetime of the program. Therefore, it can be vulnerable in memory attacks. Hence, this variable should be set to All 0's once the "aes-gcm" is used. Possible in the function where "gcm_context" struct variable is being set to all zeros. 
		Static variable round_keys[][] cannot be accessed outside the aes-128.c file. Therefore, a new function has to be writte and called which will set all the elements in the array to '0'. 
	
